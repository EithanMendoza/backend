const notificacionesModel = require('../models/notificacionesModel');

// üìå Crear una notificaci√≥n (se usar√° dentro de otros controladores)
exports.crearNotificacion = async (req, res) => {
  try {
    const { usuarioId, tecnicoId, mensaje } = req.body;

    if (!usuarioId && !tecnicoId) {
      return res.status(400).json({ error: "Debe enviarse un usuarioId o un tecnicoId." });
    }

    await notificacionesModel.crearNotificacion({ usuarioId, tecnicoId, mensaje });

    res.status(201).json({ mensaje: "Notificaci√≥n creada correctamente." });
  } catch (error) {
    console.error("‚ùå Error al crear la notificaci√≥n:", error);
    res.status(500).json({ error: "Error interno al crear la notificaci√≥n." });
  }
};



// üìå Obtener notificaciones SOLO del usuario o t√©cnico autenticado
exports.obtenerNotificaciones = async (req, res) => {
  try {
    const userId = req.user?.id || req.tecnico?.id;  // Obtener ID del usuario o t√©cnico autenticado
    const esTecnico = !!req.tecnico; // Determinar si es t√©cnico

    if (!userId) {
      return res.status(400).json({ error: "ID de usuario o t√©cnico no encontrado." });
    }

    const notificaciones = await notificacionesModel.obtenerNotificaciones(userId, esTecnico);
    res.status(200).json(notificaciones);
  } catch (error) {
    console.error("‚ùå Error al obtener notificaciones:", error);
    res.status(500).json({ error: "Error interno al obtener notificaciones." });
  }
};

// üìå Marcar una notificaci√≥n como le√≠da
exports.marcarNotificacionLeida = async (req, res) => {
  try {
    const { notificacionId } = req.params;

    const resultado = await notificacionesModel.marcarNotificacionLeida(notificacionId);
    if (!resultado) {
      return res.status(404).json({ error: "Notificaci√≥n no encontrada." });
    }

    res.status(200).json({ mensaje: "Notificaci√≥n marcada como le√≠da." });
  } catch (error) {
    console.error("‚ùå Error al marcar la notificaci√≥n como le√≠da:", error);
    res.status(500).json({ error: "Error interno al marcar la notificaci√≥n como le√≠da." });
  }
};

// üìå Eliminar notificaciones expiradas (cron job)
exports.eliminarNotificacionesExpiradas = async (req, res) => {
  try {
    const eliminadas = await notificacionesModel.eliminarNotificacionesExpiradas();
    res.status(200).json({ mensaje: `Se eliminaron ${eliminadas} notificaciones expiradas.` });
  } catch (error) {
    console.error("‚ùå Error al eliminar notificaciones expiradas:", error);
    res.status(500).json({ error: "Error interno al eliminar notificaciones expiradas." });
  }
};
